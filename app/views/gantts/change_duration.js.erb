<%
@draw_obj = []

def select_precedes(issue)
  issue.relations_from.where(:relation_type => IssueRelation::TYPE_PRECEDES).map(&:issue_to).each do |follows|
    next if @draw_obj.include?(follows)

    while follows do
      @draw_obj.concat [follows, follows.fixed_version, follows.project]
      select_precedes(follows)
      follows.children.each do |child|
        @draw_obj.concat [child, child.fixed_version, child.project]
        select_precedes(child)
      end
      follows = follows.parent
    end
  end
end

issue = @obj
while issue do
  @draw_obj.concat [issue, issue.fixed_version, issue.project]
  select_precedes(issue)
  issue = issue.parent
end
@draw_objs = @draw_obj.compact.uniq
@draw_objs.reject!{|obj| ![Project, Version, Issue].include?(obj.class)}
-%>
var elm;
<%
gantt = Redmine::Helpers::Gantt.new(params)
gantt.view = self
gantt.query = @query

@draw_objs.each do |obj|
  gantt.instance_variable_set(:@number_of_rows, 0)
  gantt.instance_variable_set(:@lines, '')
  gantt.render_object_row(
    obj,
    {format: :html, only: :lines, zoom: 2 ** gantt.zoom, top: 0, top_increment: 20}
  )
  todo_content = Nokogiri::HTML.parse(gantt.instance_variable_get(:@lines))
  todo_context = todo_content.xpath(
    "//div[contains(@class, 'task') and contains(@class, 'line')]/*"
  ).to_s.tr("\n", '').gsub(/'/, "\\\\'")

  klass_name = obj.class.name.underscore
  elm_todo = "[id=task-todo-#{klass_name}-#{obj.id}]"
  css_subject = 'span:not(.expander)'
  elm_subject = raw("[id=#{klass_name}-#{obj.id}] > #{css_subject}")

  subject_content = Nokogiri::HTML.parse(gantt.__send__(:html_subject_content, obj))
  subject_content = subject_content.css(css_subject).to_s.tr("\n", '').gsub(/'/, "\\\\'")
-%>
if ($('<%= elm_subject %>').length) {
  $('<%= elm_todo %>').each(function (_, task) {
    var el_parent = $(task).parent();
    el_parent.html('<%= raw(todo_context) %>');
    var number_of_rows = el_parent.attr('data-number-of-rows');
    if (number_of_rows) {
      el_parent.find('div[data-number-of-rows]').attr('data-number-of-rows', number_of_rows);
    }
  });
  $('<%= elm_subject %>').replaceWith('<%= raw(subject_content) %>');
<%
  case obj
  when Issue
    @query.columns.each do |column|
-%>
  elm = $('div.gantt_selected_column_content #<%= column.name %>_issue_<%= obj.id %>');
  if(elm.length) {
    elm.html('<%= escape_javascript(column_content(column, obj)) %>');
  }
<% 
    end
  end
-%>
}
<%
end
-%>